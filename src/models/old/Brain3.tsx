/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Versal (https://sketchfab.com/versal)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/brain-areas-d64608a3978b47d8a39c5a15795ca8c4
Title: Brain Areas
*/

import { useRef, Suspense } from "react";
import { OrbitControls, Sparkles, useGLTF } from "@react-three/drei";
import { Canvas, useFrame,} from "@react-three/fiber";
import BrainScene from "../assets/3D/brain3.glb";
// import { a } from "@react-spring/three";
import * as THREE from "three";
import PostProcessingEffects from "../../components/Effects";
import Loader from "../../components/Loader";
import { Ring } from "../Ring";
// import { FakeGlowMaterial } from "../materials/FakeGlowMaterial";

/**
 * @function Brain3
 * @description A THREE.js React component for a 3D model of a brain, using
 *              Three.js' GLTFLoader and react-spring's useSprings hook for
 *              animation.
 * @param {Object} props The props to pass to the component. Should include
 *                        the following keys:
 *                          - `position`: A THREE.Vector3 representing the
 *                            position to place the brain model in the scene.
 *                          - `rotation`: A THREE.Euler representing the
 *                            rotation of the brain model in the scene.
 * @returns {JSX.Element} The rendered React component.
 */
const Brain3 = (props: {
  position: THREE.Vector3;
  rotation: THREE.Euler;
}): JSX.Element => {
  const { nodes } = useGLTF(BrainScene);

  const ref = useRef<THREE.Object3D>(null);

  useFrame((_, delta) => {
    ref.current.rotation.y -= 0.5 * delta;
  });

  return (
    <group {...props} ref={ref}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
        //   castShadow
        //   receiveShadow
          geometry={nodes.Object_2.geometry}
          material={
            new THREE.MeshLambertMaterial({
              color: 0x00ff00,
              opacity: 0.85,
              transparent: true,
            })
          }
        />
        <mesh
        //   castShadow
        //   receiveShadow
          geometry={nodes.Object_3.geometry}
          material={
            new THREE.MeshLambertMaterial({
              color: 0x00ff00,
              opacity: 0.85,
              transparent: true,
            })
          }
        />
      </group>
    </group>
  );
};

useGLTF.preload(BrainScene);

export default () => (
  <>
    <Canvas
      orthographic
      shadows
      camera={{
        zoom: 1.4,
        position: [0, 30, 250],
      }}
    >
      <OrbitControls
        enableZoom={false}
        // minPolarAngle={Math.PI / 2}
        // maxPolarAngle={Math.PI / 2}
      />
      <ambientLight intensity={0.5} />
      <directionalLight position={[0, 0, 10]} intensity={0.9} />
      <directionalLight position={[0, 0, -10]} intensity={0.9} />
      {/* <pointLight intensity={.5} position={[0, 0, 5]} /> */}
          <PostProcessingEffects />
      <Suspense fallback={<Loader />}>
        {/* <mesh scale={1} position={[0, 20, 0]} rotation={[Math.PI/2, 0, 0]}>
                    <FakeGlowMaterial />
                    <torusGeometry args={[100, 3, 3, 64]} />
                </mesh> */}
        <Ring rotation={[Math.PI / 2, 0, 0]} />
        <Ring rotation={[0, Math.PI / 2, 0]} />
        <Ring rotation={[0, 0, Math.PI / 2]} />

        <mesh scale={1.1} position={[0, -120, 0]}>
          <Brain3 />
        </mesh>
        <Sparkles
          count={100}
          scale={300}
          size={35}
          speed={1.5}
          opacity={0.3}
          color="#00ff00"
        />
      </Suspense>
    </Canvas>
  </>
);
