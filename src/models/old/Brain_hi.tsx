/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { Suspense, useRef } from 'react'
import { OrbitControls, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import BrainScene from '../assets/3D/brain.glb'
import { Canvas, useFrame } from '@react-three/fiber'
import PostProcessingEffects from '../../components/Effects'

type GLTFResult = GLTF & {
  nodes: {
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
    Object_11: THREE.Mesh
    Object_12: THREE.Mesh
    Object_13: THREE.Mesh
    Object_23: THREE.Mesh
    Object_24: THREE.Mesh
    Object_15: THREE.Mesh
    Object_17: THREE.Mesh
    Object_18: THREE.Mesh
    Object_19: THREE.Mesh
    Object_21: THREE.Mesh
    Object_22: THREE.Mesh
  }
  materials: {
    MistyRo: THREE.MeshStandardMaterial
    Foregrou: THREE.MeshStandardMaterial
  }
}

const Brain = (props: JSX.IntrinsicElements['group']) => {

  const group = useRef<THREE.Group>(null!)

  const { nodes } = useGLTF(BrainScene) as GLTFResult

  const material = new THREE.MeshStandardMaterial({ color: 0x00ff00, opacity: 0.85, transparent: true })

  useFrame((_, delta) => (group.current.rotation.y += delta))

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.21}>
        <mesh geometry={nodes.Object_23.geometry} material={material} />
        <mesh geometry={nodes.Object_24.geometry} material={material} />
        <mesh geometry={nodes.Object_6.geometry} material={material} />
        <mesh geometry={nodes.Object_7.geometry} material={material} />
        <mesh geometry={nodes.Object_8.geometry} material={material} />
        <mesh geometry={nodes.Object_9.geometry} material={material} />
        <mesh geometry={nodes.Object_11.geometry} material={material} />
        <mesh geometry={nodes.Object_12.geometry} material={material} />
        <mesh geometry={nodes.Object_13.geometry} material={material} />
        <mesh geometry={nodes.Object_15.geometry} material={material} />
        <mesh geometry={nodes.Object_17.geometry} material={material} />
        <mesh geometry={nodes.Object_18.geometry} material={material} />
        <mesh geometry={nodes.Object_19.geometry} material={material} />
        <mesh geometry={nodes.Object_21.geometry} material={material} />
        <mesh geometry={nodes.Object_22.geometry} material={material} />
      </group>
    </group>
  )
}

useGLTF.preload(BrainScene)


export default () => (
  <Canvas
      orthographic
      camera={{
          position: [0, 0, 300],
      }}
  >
      <OrbitControls
      enableZoom={false}
      minPolarAngle={Math.PI / 2}
      maxPolarAngle={Math.PI / 2}
      />
      <ambientLight intensity={0.5} />
      <directionalLight position={[0, 0, 10]} intensity={0.9} />
      <directionalLight position={[0, 0, -10]} intensity={0.9} />
      <PostProcessingEffects />
      <Suspense fallback={null}>
          <mesh scale={6} position={[0, -50, 0]}>
              <Brain />
          </mesh>
      </Suspense>
  </Canvas>
);
