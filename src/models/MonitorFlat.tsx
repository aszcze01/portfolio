/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/office-monitor-workstation-monitor-6a7b0147890242418a49f6db26657ab4
Title: Office Monitor / Workstation Monitor
*/

import * as THREE from 'three'
import { Suspense, useRef } from 'react'
import { OrbitControls, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import MonitorScene from '../assets/3D/monitor_flat-transformed.glb'
import { Canvas, useFrame } from '@react-three/fiber'
import PostProcessingEffects from '../components/Effects'

type GLTFResult = GLTF & {
  nodes: {
    group_0_Material001_0: THREE.Mesh
    SketchUp_material_0: THREE.Mesh
    SketchUp004_Material003_0: THREE.Mesh
  }
  materials: {}
}

  const MonitorFlat = (props: JSX.IntrinsicElements['group']) => {
  const { nodes } = useGLTF(MonitorScene) as GLTFResult
  const group = useRef<THREE.Group>(null!)
 
  useFrame((_, delta) => (group.current.rotation.y += delta))

  const material = new THREE.MeshStandardMaterial({ color: 0x00ff00, opacity: 0.85, transparent: true })
  
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.group_0_Material001_0.geometry} material={material} position={[12.609, 52.176, -1.644]} rotation={[-Math.PI / 2, 0, 0]} scale={4.638} />
      <mesh geometry={nodes.SketchUp_material_0.geometry} material={material} position={[-0.012, 2.136, -0.248]} rotation={[-Math.PI / 2, 0, 0]} scale={4.638} />
      <mesh geometry={nodes.SketchUp004_Material003_0.geometry} material={material} position={[-0.337, 2.676, 2.436]} rotation={[-Math.PI / 2, 0, 0]} scale={4.638} />
    </group>
  )
}

useGLTF.preload(MonitorScene)

export default () => (
    <Canvas
        orthographic
        camera={{
        position: [0, 0, 200],
        }}
    >
        <OrbitControls
        enableZoom={false}
        minPolarAngle={Math.PI / 2}
        maxPolarAngle={Math.PI / 2}
        />
        <ambientLight intensity={0.5} />
        <directionalLight position={[0, 0, 10]} intensity={0.9} />
        <directionalLight position={[0, 0, -10]} intensity={0.9} />
        <PostProcessingEffects />
        <Suspense fallback={null}>
        <mesh scale={0.6} position={[0, -10, 0]}>
            <MonitorFlat />
        </mesh>
        </Suspense>
    </Canvas>
  );
