/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: David SV (https://sketchfab.com/davidsvj)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/retro-computer-monitor-f85da850be324b308bb3206ff5e86d3f
Title: Retro Computer Monitor
*/

import * as THREE from 'three'
import { Loader, OrbitControls, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import MonitorCRTScene from '../assets/3D/monitor_crt-transformed.glb'
import { Canvas, useFrame } from '@react-three/fiber'
import PostProcessingEffects from '../components/Effects'
import { Suspense, useRef } from 'react'

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh
  }
  materials: {}
}

const MonitorCRT = (props: JSX.IntrinsicElements['group']) => {

  const { nodes } = useGLTF(MonitorCRTScene) as GLTFResult

  const group = useRef<THREE.Group>(null!)

  useFrame((_, delta) => (group.current.rotation.y -= delta))

  const material = new THREE.MeshStandardMaterial({ color: 0x00ff00, opacity: 0.85, transparent: true })

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Object_4.geometry} material={material} scale={[1.905, 2.198, 2.393]} />
    </group>
  )
}

useGLTF.preload(MonitorCRTScene)

export default () => (
    <Canvas
        orthographic
        camera={{
        position: [0, 0, 100],
        }}
    >
        <OrbitControls
        enableZoom={false}
        minPolarAngle={Math.PI / 2}
        maxPolarAngle={Math.PI / 2}
        />
        <ambientLight intensity={0.5} />
        <directionalLight position={[0, 0, 10]} intensity={0.9} />
        <directionalLight position={[0, 0, -10]} intensity={0.9} />
        <PostProcessingEffects />
        <Suspense fallback={null}>
        <mesh scale={15} position={[0, 0, 0]}>
            <MonitorCRT />
        </mesh>
        </Suspense>
    </Canvas>
  );