/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ufo.glb --transform --types --keepmeshes 
Files: ufo.glb [84.4KB] > C:\PROJECTS\New Folder\ufo-transformed.glb [18.64KB] (78%)
*/

import * as THREE from 'three'
import { Suspense, useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import UfoScene from '../assets/3D/ufo_anim-transformed.glb'
import { Canvas } from '@react-three/fiber'
import PostProcessingEffects from '../components/Effects'

type GLTFResult = GLTF & {
  nodes: {
    Object_6: THREE.Mesh
  }
  materials: {}
  animations: GLTFAction[]
}

type ActionName = 'Action'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

const Ufo = (props: JSX.IntrinsicElements['group']) => {

  const group = useRef<THREE.Group>(null!)

  const { nodes, animations } = useGLTF(UfoScene) as GLTFResult

  const { actions, mixer } = useAnimations(animations, group);
  
  useEffect(() => {
    actions.Action!.play();
  }, [mixer]);

  const material = new THREE.MeshStandardMaterial({ color: 0x00ff00, opacity: 0.85, transparent: true })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={material} position={[2.85, -0.08, 5.141]} rotation={[Math.PI, 0, Math.PI]} />
      </group>
    </group>
  )
}

useGLTF.preload(UfoScene)

export default () => (
  <Canvas
      orthographic
      camera={{
          position: [0, 0, 300],
      }}
  >
      <ambientLight intensity={0.3} />
      <directionalLight position={[0, 0, 10]} intensity={0.7} />
      <directionalLight position={[0, 0, -10]} intensity={0.7} />
      <PostProcessingEffects />
      <Suspense fallback={null}>
          <mesh scale={40} position={[0, 0, 0]} rotation={[0, 0, 0]}>
              <Ufo />
          </mesh>
      </Suspense>
  </Canvas>
);
