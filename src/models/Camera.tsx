/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: 1-3D.com (https://sketchfab.com/1-3D.com)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/reflex-camera-228d92307870440496e23b95b6c5b2a4
Title: Reflex camera
*/

import * as THREE from 'three'
import { OrbitControls, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import CameraScene from '../assets/3D/camera-transformed.glb'
import { Canvas, useFrame } from '@react-three/fiber'
import PostProcessingEffects from '../components/Effects'
import { Suspense, useRef } from 'react'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
  }
  materials: {}
}

const Camera = (props: JSX.IntrinsicElements['group']) => {
  const { nodes } = useGLTF(CameraScene) as GLTFResult
  const material = new THREE.MeshStandardMaterial({ color: 0x00ff00, opacity: 0.85, transparent: true })
  const group = useRef<THREE.Group>(null!)

  useFrame((_, delta) => (group.current.rotation.y += delta))

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Object_2.geometry} material={material} rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload(CameraScene)

export default () => (
    <Canvas
        orthographic
        camera={{
        position: [0, 0, 200],
        }}
    >
        <OrbitControls
        enableZoom={false}
        minPolarAngle={Math.PI / 2}
        maxPolarAngle={Math.PI / 2}
        />
        <ambientLight intensity={0.5} />
        <directionalLight position={[0, 0, 10]} intensity={0.9} />
        <directionalLight position={[0, 0, -10]} intensity={0.9} />
        <PostProcessingEffects />
        <Suspense fallback={null}>
            <mesh scale={4} position={[0, 0, 0]}>
                <Camera />
            </mesh>
        </Suspense>
    </Canvas>
  );