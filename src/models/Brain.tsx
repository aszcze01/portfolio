/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { Suspense, useEffect, useLayoutEffect, useRef } from "react";
import { OrbitControls, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import BrainScene from "../assets/3D/brain_LP2-transformed.glb";
import { Canvas, useFrame } from "@react-three/fiber";
import PostProcessingEffects from "../components/Effects";
import { Ring } from "./Ring";
import state from "../store";
import { useSnapshot } from "valtio";
// import { FakeGlowMaterial } from "../materials/FakeGlowMaterial";

type GLTFResult = GLTF & {
  nodes: {
    cerebellum: THREE.Mesh;
    leftHemisphere: THREE.Mesh;
    brainstem: THREE.Mesh;
    rightHemisphere: THREE.Mesh;
  };
  materials: {};
  // animations: GLTFAction[]
};

const Brain = (props: JSX.IntrinsicElements["group"]) => {
  const group = useRef<THREE.Group>(null!);
  // const cerebellum = useRef<THREE.Mesh>(null!)
  const brainstem = useRef<THREE.Mesh>(null!);
  const rightHemisphere = useRef<THREE.Mesh>(null!);
  const leftHemisphere = useRef<THREE.Mesh>(null!);

  let { isBioLinkHovered, isWorkLinkHovered, isContactLinkHovered } =
    useSnapshot(state);

  const { nodes } = useGLTF(BrainScene) as GLTFResult;

  const material = new THREE.MeshStandardMaterial({
    color: 0x00ff00,
    opacity: 0.6,
    transparent: true,
  });
  const material2 = new THREE.MeshStandardMaterial({
    color: 0xffff00,
    transparent: false,
  });

  useFrame((_, delta) => (group.current.rotation.y += delta));

  useEffect(() => {
    isBioLinkHovered && (brainstem.current.material = material2);
    isWorkLinkHovered && (rightHemisphere.current.material = material2);
    isContactLinkHovered && (leftHemisphere.current.material = material2);
  }, [isBioLinkHovered, isWorkLinkHovered, isContactLinkHovered]);

  return (
    // <group ref={group} {...props} dispose={null}>
    //   <mesh geometry={nodes.cerebellum.geometry} material={material} position={[0, 0, -0.064]} rotation={[1.584, 0, 0]} scale={3.586} />
    //   <mesh ref={brainstem} geometry={nodes.brainstem.geometry} material={material} position={[0, 0, -0.064]} rotation={[1.584, 0, 0]} scale={3.586} />
    //   <mesh ref={rightHemisphere} geometry={nodes.rightHemisphere.geometry} material={material} position={[0, 0, -0.064]} rotation={[1.584, 0, 0]} scale={3.586} />
    //   <mesh ref={leftHemisphere} geometry={nodes.leftHemisphere.geometry} material={material} position={[0, 0, -0.064]} rotation={[1.584, 0, 0]} scale={3.586} />
    // </group>

    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.cerebellum.geometry}
        material={material}
        scale={6.808}
      />
      <mesh
        ref={leftHemisphere}
        geometry={nodes.leftHemisphere.geometry}
        material={material}
        scale={6.808}
      />
      <mesh
        ref={brainstem}
        geometry={nodes.brainstem.geometry}
        material={material}
        scale={6.808}
      />
      <mesh
        ref={rightHemisphere}
        geometry={nodes.rightHemisphere.geometry}
        material={material}
        scale={6.808}
      />
    </group>
  );
};

useGLTF.preload(BrainScene);

export default () => (
  <Canvas
    orthographic
    camera={{
      position: [0, 0, 300],
    }}
  >
    <OrbitControls
      enableZoom={false}
      minPolarAngle={Math.PI / 2}
      maxPolarAngle={Math.PI / 2}
    />
    <ambientLight intensity={0.5} />
    <directionalLight position={[0, 0, 10]} intensity={0.9} />
    <directionalLight position={[0, 0, -10]} intensity={0.9} />
    <PostProcessingEffects />
    <Suspense fallback={null}>
      <Ring rotation={new THREE.Euler(Math.PI / 2, 0, 0)} />
      <Ring rotation={new THREE.Euler(0, Math.PI / 2, 0)} />
      <Ring rotation={new THREE.Euler(0, 0, Math.PI / 2)} />

      <mesh scale={30} position={[0, -100, 0]}>
        <Brain />
      </mesh>
    </Suspense>
  </Canvas>
);
